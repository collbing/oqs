<?xml version="1.0" encoding="GBK"?>
<!--
 Copyright 2006-2008 Alex Lin. All rights reserved.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<project basedir="." default="usage" name="opoo-oqs">
    <property file="${basedir}/build.properties"/>
    <property file="${basedir}/default.properties"/>

	<patternset id="oqs.sources">
		<include name="org/opoo/oqs/**/*.java"/>
		<include name="org/opoo/util/ArrayUtils.java"/>
		<include name="org/opoo/util/Assert.java"/>
		<include name="org/opoo/util/ClassUtils.java"/>
		<include name="org/opoo/util/CollectionUtils.java"/>
		<include name="org/opoo/util/StringUtils.java"/>
	</patternset>

	<fileset id="src.files" dir="${source.home}">
		<patternset refid="oqs.sources"/>
	</fileset>

	<fileset id="${resources}" dir="${source.home}" excludes="**/*.java">
		<include name="org/opoo/oqs/**"/>
	</fileset>

	<patternset id="oqs.lib">
		<include name="commons-beanutils.jar"/>
		<include name="hibernate3.jar"/>
		<include name="commons-logging.jar"/>
		<!-- <include name="spring-2.0.6.jar"/> -->
		<include name="spring-jdbc.jar"/>
		<include name="spring-dao.jar"/>
		<include name="spring-core.jar"/>
		<include name="spring-beans.jar"/>
		<include name="commons-lang-2.3.jar"/>
		<include name="jta.jar"/>
		<include name="commons-collections-3.2.jar"/>
		<include name="commons-codec-1.3.jar"/>
	</patternset>

	<fileset id="lib.files" dir="${lib.home}">
		<patternset refid="oqs.lib"/>
	</fileset>

	<path id="compile.classpath">
		<fileset refid="lib.files"/>
	</path>


    <!-- ========== Executable Targets ======================================== -->
    <target name="init" description="Initialize and evaluate conditionals">
		<tstamp>
			<format property="tstamp" pattern="yyyyMMddHHmmss"/>
		</tstamp>
        <echo message="-------- ${oqs-name} ${oqs-version} ${tstamp}--------"/>
        <filter token="NAME" value="${oqs-name}"/>
        <filter token="PACKAGE" value="${oqs-package}"/>
        <filter token="VERSION" value="${oqs-version}"/>
		<filter token="TITLE" value="${oqs-title}"/>
		<filter token="VENDOR" value="${oqs-vendor}"/>
		<filter token="VERSION_NUMBER" value="${version.number}"/>
		<filter token="VERSION_BUILD" value="${tstamp}"/>
    </target>

    <target name="prepare" depends="init" description="Prepare build directory">
        <mkdir dir="${build.home}"/>
        <mkdir dir="${build.home}/classes"/>
        <mkdir dir="${build.home}/conf"/>
		<mkdir dir="${build.home}/docs"/>
    </target>

    <target name="static" depends="prepare" description="Copy static files to build directory">
        <tstamp/>
        <copy todir="${build.home}/conf" filtering="on">
            <fileset dir="${conf.home}" includes="*.MF"/>
        </copy>
<!-- 		<copy todir="${build.home}/docs" filtering="on">
            <fileset dir="${docs.home}" includes="**/*.xml"/>
        </copy> -->
    </target>

	<target name="compile" depends="static" description="Compile files">
		<javac srcdir="${source.home}" destdir="${build.home}/classes" source="1.4" target="1.4" debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" failonerror="true">
			<!-- <include name="org/opoo/oqs/**"/> -->
			<patternset refid="oqs.sources"/>
			<classpath refid="compile.classpath"/>
		</javac>
		<!-- if have resources -->
		<!-- 
        <copy todir="${build.home}/classes" filtering="on">
            <fileset refid="resources"/>
        </copy> -->
    </target>


    <target name="clean" description="Clean build and distribution directories">
        <delete dir="${build.home}"/>
        <delete dir="${dist.home}"/>
        <delete dir="${pub.home}"/>
    </target>

	<target name="all" depends="clean,compile" description="Clean and compile all"/>


	<target name="javadoc" depends="compile" description="Create component Javadoc documentation">
        <mkdir dir="${dist.home}"/>  
		<mkdir dir="${dist.home}/docs"/>
        <mkdir dir="${dist.home}/docs/api"/>
		<!-- sourcepath="${source.home}" -->
		<javadoc 
        	destdir="${dist.home}/docs/api" 
			packagenames="org.opoo.*" 
			overview="${source.home}/org/opoo/oqs/overview.html"
			author="true" 
			private="true" 
			version="true" 
			doctitle="&lt;h1&gt;${oqs-title}&lt;/h1&gt;" 
			windowtitle="${oqs-title} (Version ${oqs-version})" 
			bottom="${oqs-name} version ${oqs-version}. Copyright &amp;copy; 2006-2008 ${oqs-vendor}. All Rights Reserved." 
			use="true" 
			link="http://java.sun.com/j2se/1.4.2/docs/api/">
			<link href="http://static.springframework.org/spring/docs/2.5.x/api/"/>
			<link href="http://www.hibernate.org/hib_docs/v3/api/"/>
			<link href="http://commons.apache.org/codec/api-release/"/>
			<link href="http://commons.apache.org/collections/api-release/"/>
			<link href="http://commons.apache.org/logging/apidocs/"/>
			<link href="http://commons.apache.org/beanutils/api/"/>
			<link href="http://commons.apache.org/lang/api-release/"/>
			<fileset dir="${source.home}" defaultexcludes="yes">
			  <patternset refid="oqs.sources"/>
			</fileset>
			<classpath refid="compile.classpath"/>
		</javadoc>
	</target>

    <target name="dist" depends="compile,javadoc" description="Create binary distribution">
        <mkdir dir="${dist.home}"/>
        <copy file="${basedir}/license.txt" todir="${dist.home}"/>
        <copy file="${basedir}/readme.txt" todir="${dist.home}"/>
		<copy file="${basedir}/notice.txt" todir="${dist.home}"/>
		<copy file="${basedir}/changelog.txt" todir="${dist.home}"/>
		<copy todir="${dist.home}/docs/"><fileset dir="${docs.home}" includes="reference/html*/**"/></copy>
        <antcall target="jar"/>
    </target>

    <target name="jar" depends="compile" description="Create jar">
        <mkdir dir="${dist.home}"/>
        <mkdir dir="${build.home}/classes/META-INF"/>
        <copy file="${basedir}/license.txt" tofile="${build.home}/classes/META-INF/LICENSE.txt"/>
        <jar jarfile="${dist.home}/${final.name}.jar" basedir="${build.home}/classes" manifest="${build.home}/conf/MANIFEST.MF"/>
    </target>

    <target name="jar2" description="Create jar">
		<jar jarfile="${dist.home}/${final.name}.jar">
			<fileset dir="${build.home}/classes">
				<include name="org/opoo/oqs/**"/>
			</fileset>
			<metainf file="license.txt"/>
			<manifest>
				<attribute name="Implementation-Title" value="${oqs-title}"/>
				<attribute name="Implementation-Version" value="${oqs-version}"/>
				<attribute name="OQS-Version" value="${oqs-version}"/>
			</manifest>
		</jar>
	</target>




  <target name="pub-bin" depends="dist" description="Create binary distribution (compressed) ready for publication">
        <mkdir dir="${pub.home}"/>
        <!-- Binary properties -->
        <property name="final.path" value="${pub.home}/${final.name}"/>
        <property name="zip.path" value="${final.path}.zip"/>
        <property name="tar.path" value="${final.path}.tar"/>
        <property name="gz.path" value="${tar.path}.gz"/>
        <!-- Zip binary dist -->
        <zip destfile="${zip.path}">
			<zipfileset dir="${dist.home}" prefix="${final.name}/"/>
			<zipfileset dir="${samples.home}" prefix="${final.name}/samples/"/>
			<zipfileset refid="lib.files" prefix="${final.name}/lib/"/>
        </zip>
        <checksum algorithm="md5" file="${zip.path}" fileext=".md5"/>
        <checksum algorithm="sha" file="${zip.path}" fileext=".sha"/>
        <!-- Tar & gzip binary dist -->
        <tar tarfile="${tar.path}">
			<tarfileset dir="${dist.home}" prefix="${final.name}/"/>
			<tarfileset dir="${samples.home}" prefix="${final.name}/samples/"/>
			<tarfileset dir="${lib.home}" prefix="${final.name}/lib/">
				<patternset refid="oqs.lib"/>
			</tarfileset>
		</tar>
        <gzip zipfile="${gz.path}" src="${tar.path}"/>
        <checksum algorithm="md5" file="${gz.path}" fileext=".md5"/>
        <checksum algorithm="sha" file="${gz.path}" fileext=".sha"/>
        <delete file="${tar.path}"/>
        <!-- Delete old signatures -->
        <delete file="${zip.path}.asc"/>
        <delete file="${gz.path}.asc"/>
    </target>



   <target name="pub-src" depends="dist" description="Create source distribution (compressed) ready for publication based on your LOCAL CVS sources">
        <mkdir dir="${pub.home}"/>
        <echo>Warning: The source files used to create this source distribution come from your local copy of the source files.</echo>
        <!-- Source properties -->
        <property name="final-src.path" value="${pub.home}/${final.name}-src"/>
        <property name="zip-src.path" value="${final-src.path}.zip"/>
        <property name="tar-src.path" value="${final-src.path}.tar"/>
        <property name="gz-src.path" value="${tar-src.path}.gz"/>
        <!-- Zip source dist -->
        <zip destfile="${zip-src.path}">
           <!-- <zipfileset dir="src" prefix="${final.name}/src/"/> -->
		   <zipfileset refid="src.files" prefix="${final.name}/src/"/>
		   <zipfileset refid="lib.files" prefix="${final.name}/lib/"/>
		   <!-- <zipfileset refid="resources" prefix="${final.name}/"/> -->
           <zipfileset dir="." includes="build.xml" prefix="${final.name}/"/>
           <zipfileset dir="." includes="default.properties" prefix="${final.name}/"/>
           <zipfileset dir="." includes="license.txt" prefix="${final.name}/"/>
           <zipfileset dir="." includes="notice.txt" prefix="${final.name}/"/>
		   <zipfileset dir="." includes="readme.txt" prefix="${final.name}/"/>
		   <zipfileset dir="." includes="changelog.txt" prefix="${final.name}/"/>
		   <zipfileset dir="conf" includes="*.MF" prefix="${final.name}/conf/"/>
		   <zipfileset dir="${docs.home}" prefix="${final.name}/docs/" includes="reference/html*/**"/>
		   <zipfileset dir="${samples.home}" prefix="${final.name}/samples/"/>
        </zip>
        <checksum algorithm="md5" file="${zip-src.path}" fileext=".md5"/>
        <checksum algorithm="sha" file="${zip-src.path}" fileext=".sha"/>
        <!-- Tar & gzip source dist -->
		<tar tarfile="${tar-src.path}">
 			<tarfileset dir="${source.home}" prefix="${final.name}/src/">
				<patternset refid="oqs.sources"/>
			</tarfileset>
			<tarfileset dir="${lib.home}" prefix="${final.name}/lib/">
				<patternset refid="oqs.lib"/>
			</tarfileset>
			<tarfileset dir="${docs.home}" prefix="${final.name}/docs/" includes="reference/html*/**"/>
			<tarfileset dir="." includes="build.xml" prefix="${final.name}/"/>
			<tarfileset dir="." includes="default.properties" prefix="${final.name}/"/>
			<tarfileset dir="." includes="license.txt" prefix="${final.name}/"/>
			<tarfileset dir="." includes="notice.txt" prefix="${final.name}/"/>
			<tarfileset dir="." includes="readme.txt" prefix="${final.name}/"/>
			<tarfileset dir="." includes="changelog.txt" prefix="${final.name}/"/>
			<tarfileset dir="conf" includes="*.MF" prefix="${final.name}/conf/"/>
			<tarfileset dir="${samples.home}" prefix="${final.name}/samples/"/>
		</tar>
        <gzip zipfile="${gz-src.path}" src="${tar-src.path}"/>
        <checksum algorithm="md5" file="${gz-src.path}" fileext=".md5"/>
        <checksum algorithm="sha" file="${gz-src.path}" fileext=".sha"/>
        <delete file="${tar-src.path}"/>
        <!-- Delete old signatures -->
        <delete file="${zip-src.path}.asc"/>
        <delete file="${gz-src.path}.asc"/>
    </target>


    <target name="pub" depends="pub-bin, pub-src" description="Create binary and source distribution (compressed) ready for publication">
    </target>





	<target name="doc.prepare" description="Extra preparation for the documentation">
		<fail message="XSLT supporting lib not installed. Please see '${doc.ref.dir}/readme.txt' for instructions.">
			<condition>
				<not>
					<available file="${basedir}/${doc.ref.dir}/lib"/>
				</not>
			</condition>
		</fail>
	</target>

	<target name="doc.htmlsingle" depends="doc.prepare" description="Compile reference documentation to single html">
		<mkdir dir="${dist.ref.dir}/html_single/images"/>
		<copy todir="${basedir}/${dist.ref.dir}/html_single/images">
			<fileset dir="${basedir}/${doc.ref.dir}/src/images">
				<include name="*.gif"/>
				<include name="*.svg"/>
				<include name="*.jpg"/>
				<include name="*.png"/>
			</fileset>
		</copy>

		<copy todir="${basedir}/${dist.ref.dir}/html_single/" file="${basedir}/${doc.ref.dir}/styles/html.css" failonerror="false"/>
		<java classname="com.icl.saxon.StyleSheet" fork="true" dir="${doc.ref.dir}">
			<classpath>
				<fileset dir="${basedir}/${doc.dir}/reference/lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<jvmarg value="-Xmx256M"/>
			<jvmarg value="-XX:MaxPermSize=128m"/>
			<arg value="-o"/>
			<arg value="${basedir}/${dist.ref.dir}/html_single/index.html"/>
			<arg value="${basedir}/${doc.ref.dir}/src/index.xml"/>
			<arg value="${basedir}/${doc.ref.dir}/styles/html.xsl"/>
		</java>
	</target>

	<target name="doc.html" depends="doc.prepare" description="Compile reference documentation to chunked html">
		<mkdir dir="${dist.ref.dir}/html/images"/>
		<copy todir="${basedir}/${dist.ref.dir}/html/images">
			<fileset dir="${basedir}/${doc.ref.dir}/src/images">
				<include name="**/*.gif"/>
				<include name="*.svg"/>
				<include name="*.jpg"/>
				<include name="*.png"/>
			</fileset>
		</copy>

		<copy todir="${basedir}/${dist.ref.dir}/html/" failonerror="false">
			<fileset dir="${basedir}/${doc.ref.dir}/styles/">
				<include name="*.css"/>
				<include name="*.js"/>
			</fileset>
		</copy>

		<java classname="com.icl.saxon.StyleSheet" fork="true" dir="${dist.ref.dir}/html/">
			<classpath>
				<fileset dir="${basedir}/${doc.ref.dir}/lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<jvmarg value="-Xmx256M"/>
			<jvmarg value="-XX:MaxPermSize=128m"/>
			<arg value="${basedir}/${doc.ref.dir}/src/index.xml"/>
			<arg value="${basedir}/${doc.ref.dir}/styles/html_chunk.xsl"/>
		</java>
	</target>


	<target name="doc.pdf" depends="doc.prepare" description="Compile reference documentation to pdf">
		<mkdir dir="${basedir}/${dist.ref.dir}/pdf/images"/>
		<copy todir="${basedir}/${dist.ref.dir}/pdf/images">
			<fileset dir="${basedir}/${doc.ref.dir}/src/images">
				<include name="**/*.gif"/>
				<include name="*.svg"/>
				<include name="*.jpg"/>
				<include name="*.png"/>
			</fileset>
		</copy>

		<java classname="com.icl.saxon.StyleSheet" fork="true" dir="${doc.ref.dir}">
			<classpath>
				<fileset dir="${basedir}/${doc.ref.dir}/lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<jvmarg value="-Xmx256M"/>
			<jvmarg value="-XX:MaxPermSize=128m"/>
			<arg value="-o"/>
			<arg value="${basedir}/${dist.ref.dir}/pdf/docbook_fop.tmp"/>
			<arg value="${basedir}/${doc.ref.dir}/src/index.xml"/>
			<arg value="${basedir}/${doc.ref.dir}/styles/fopdf.xsl"/>
			<!-- controls the double sided pagination style -->
			<arg value="double.sided=${double.sided}"/>
			
		</java>

		<available property="custom.fop.userconfig.present" file="userconfig.xml" filepath="${basedir}/${doc.ref.dir}/fop" />

		<java classname="org.apache.fop.apps.Fop" fork="true" maxmemory="256m" dir="${doc.ref.dir}">
			<classpath>
				<fileset dir="${basedir}/${doc.ref.dir}/lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<arg value="${basedir}/${dist.ref.dir}/pdf/docbook_fop.tmp"/>
			<arg value="${basedir}/${dist.ref.dir}/pdf/oqs-reference.pdf"/>
		</java>
		<delete file="${dist.ref.dir}/pdf/docbook_fop.tmp"/>
	</target>




	<target name="usage">
		<echo message=""/>
		<echo message="${oqs-name} build file"/>
		<echo message="------------------------------------------------------"/>
		<echo message=""/>
		<echo message="Among the available targets are:"/>
		<echo message=""/>
		<echo message="all    --> build all; don't create JARs and API docs"/>
		<echo message="dist   --> create all JAR files and API docs"/>
		<echo message="pub    --> create source and binary distributions (compressed) "/>
		<echo message=""/>
	</target>

</project>
